Practical No. 1: 2-D Graph Plotting

Name:

Roll No:

Q.1 Plot the graph of y=x in [-10,10] with 0.1 equal intervals.

python
Copy code
import matplotlib.pyplot as plt 
import numpy as np 

x = np.arange(-10, 10, 0.1) 
y = x 

plt.xlabel('X-axis') 
plt.ylabel('Y-axis') 
plt.title('Graph of x') 
plt.plot(x, y) 
plt.show() 
Q.2 Plot the graph of y=xÂ² in [-10, 10] into 0.1 equal subintervals.

python
Copy code
import matplotlib.pyplot as plt 
import numpy as np 

x = np.arange(-10, 10, 0.1) 
y = x**2 

plt.xlabel('X-axis') 
plt.ylabel('Y-axis') 
plt.title('Graph of x^2') 
plt.plot(x, y) 
plt.show() 
Q.3 Plot the graph of y= sin(x) in [-10, 10] into 0.1 equal subintervals.

python
Copy code
import matplotlib.pyplot as plt 
import numpy as np 

x = np.arange(-10, 10, 0.1) 
y = np.sin(x) 

plt.xlabel('X-axis') 
plt.ylabel('Y-axis') 
plt.title('Graph of sin(x)') 
plt.plot(x, y) 
plt.show() 
Q.4 Plot the graph of y= log(x) in [-10, 10] into 0.1 equal subintervals.

python
Copy code
import matplotlib.pyplot as plt 
import numpy as np 

x = np.arange(-10, 10, 0.1) 
y = np.log(x) 

plt.xlabel('X-axis') 
plt.ylabel('Y-axis') 
plt.title('Graph of log(x)') 
plt.plot(x, y) 
plt.show() 
Q.5 Plot the graph of y= cos(x) in [-10, 10] into 0.1 equal subintervals.

python
Copy code
import matplotlib.pyplot as plt 
import numpy as np 

x = np.arange(-10, 10, 0.1) 
y = np.cos(x) 

plt.xlabel('X-axis') 
plt.ylabel('Y-axis') 
plt.title('Graph of cos(x)') 
plt.plot(x, y) 
plt.show() 
Q.6 Plot the graph of y= x^2 + 1 in [-10, 10] into 0.1 equal subintervals.

python
Copy code
import matplotlib.pyplot as plt 
import numpy as np 

x = np.arange(-10, 10, 0.1) 
y = x**2 + 1 

plt.xlabel('X-axis') 
plt.ylabel('Y-axis') 
plt.title('Graph of x^2 + 1') 
plt.plot(x, y) 
plt.show() 
Q.7 Plot the graph of y= tan(x) in [-10, 10] into 0.1 equal subintervals.

python
Copy code
import matplotlib.pyplot as plt 
import numpy as np 

x = np.arange(-10, 10, 0.1) 
y = np.tan(x) 

plt.xlabel('X-axis') 
plt.ylabel('Y-axis') 
plt.title('Graph of tan(x)') 
plt.plot(x, y) 
plt.show() 
Q.8 Plot the graph of y= cos(x)+1 in [-10, 10] into 0.1 equal subintervals.

python
Copy code
import matplotlib.pyplot as plt 
import numpy as np 

x = np.arange(-10, 10, 0.1) 
y = np.cos(x) + 1 

plt.xlabel('X-axis') 
plt.ylabel('Y-axis') 
plt.title('Graph of cos(x) + 1') 
plt.plot(x, y) 
plt.show() 
Q.9 Plot the graph of y= cosh(x) in [-1, 1] into 0.1 equal subintervals.

python
Copy code
import matplotlib.pyplot as plt 
import numpy as np 

x = np.arange(-1, 1, 0.1) 
y = np.cosh(x) 

plt.xlabel('X-axis') 
plt.ylabel('Y-axis') 
plt.title('Graph of cosh(x)') 
plt.plot(x, y) 
plt.show() 
Q.10 Plot the graph of y= |x| in [-10, 10] into 0.1 equal subintervals.

python
Copy code
import matplotlib.pyplot as plt 
import numpy as np 

x = np.arange(-10, 10, 0.1) 
y = np.abs(x) 

plt.xlabel('X-axis') 
plt.ylabel('Y-axis') 
plt.title('Graph of |x|') 
plt.plot(x, y) 
plt.show() 


Certainly! Here are the questions and programs for Practical No. 2 and Practical No. 3 without the outputs:

---

**Practical No. 2: 2-D Graph Plotting-II**

**Name:**

**Roll No:**

**Q.1 Draw line graph of the following data:**

Match(X) 1|2|3|4|5|6|7|8|9|10  
Run(Y) 6|4|2|0|10|20|15|6|18|12  

```python
import matplotlib.pyplot as plt 
import numpy as np 

Match = [1,2,3,4,5,6,7,8,9,10] 
Run = [6,4,2,0,10,20,15,6,18,12] 

plt.xlabel('x-axis') 
plt.ylabel('y-axis') 
plt.title('line graph') 
plt.plot(Match, Run) 
plt.show() 
```

**Q.2 Draw line graph of the following data:**

Color(X) 1|2|3|4|5  
Number(Y) 16|20|30|26|34  

```python
import matplotlib.pyplot as plt 
import numpy as np 

color = [1,2,3,4,5] 
number = [16,20,30,26,34] 

plt.xlabel('x-axis') 
plt.ylabel('y-axis') 
plt.title('line graph') 
plt.plot(color, number) 
plt.show() 
```

**Q.3 Draw the combination of line graph with the following data:**

X2 1|2|3|4|5  
Y2 16|20|30|26|34  
X1 1|2|3|4|5|6|7|8|9|10  
Y1 6|4|2|0|10|20|15|18|12  

```python
import matplotlib.pyplot as plt 
import numpy as np 

X1 = [1,2,3,4,5,6,7,8,9,10] 
Y1 = [6,4,2,0,10,20,15,6,18,12] 

plt.plot(X1, Y1, label='line 1') 

X2 = [1,2,3,4,5] 
Y2 = [16,20,30,26,34] 

plt.plot(X2, Y2, label='line 2') 

plt.xlabel('x-axis') 
plt.ylabel('y-axis') 
plt.title('line graph') 
plt.show() 
```

**Q.4 Draw a bar graph using following data:**

Cities Pune|Mumbai|Nagpur|Nasik|Satara  
No.of Covid Patients  

```python
import matplotlib.pyplot as plt 

left = [1,2,3,4,5] 
height = [5,24,45,32,15] 
tick_label = ['Pune', 'Mumbai', 'Nagpur', 'Nasik', 'Satara'] 

plt.bar(left, height, tick_label=tick_label, width=0.8, color=['red','green']) 
plt.xlabel('cities') 
plt.ylabel('No. of Covid Patients (in thousands)') 
plt.title('Covid-19 data') 
plt.show() 
```

**Q.5 Draw a bar graph using following data:**

Class 6th|7th|8th|9th|10th|11th  
No. of Students 130|120|135|130|150|80  

```python
import matplotlib.pyplot as plt 

x = [1,2,3,4,5,6] 
y = [130,120,135,130,150,80] 
tick_label = ['6th','7th','8th','9th','10th','11th'] 

plt.bar(x, y, tick_label=tick_label, width=0.8, color=['red','blue']) 
plt.xlabel('Class') 
plt.ylabel('No. of Students') 
plt.title('College') 
plt.show() 
```

**Q.6 Draw the Histogram for the following data:**

Ages=2,5,70,40,30,45,50,45,432,40,44,60,713,57,18,90,77,32,21,20,40,45,32,38  

```python
import matplotlib.pyplot as plt 

Ages = [2,5,70,40,30,45,50,45,432,40,44,60,713,57,18,90,77,32,21,20,40,45,32,38] 
range = (0,100) 
bins = 5 

plt.hist(Ages, bins, range, color='blue', histtype='bar', rwidth=0.8) 
plt.xlabel('Ages') 
plt.ylabel('No. of People') 
plt.title('Histogram plot') 
plt.show() 
```

**Q.7 Draw Pie Chart using following Data:**

Cities Pune|Mumbai|Nagpur|Nasik|Satara  
No.of Covid Patients 24|45|32|18|15  

```python
import matplotlib.pyplot as plt 

height = [24,45,32,18,15] 
tick_label = ['Pune', 'Mumbai', 'Nagpur', 'Nasik', 'Satara'] 

plt.pie(height, labels=tick_label) 
plt.show() 
```

**Q.8 Draw Scatter Plots using following Data:**

Girls Score= 81, 90, 70, 89, 100, 80, 90, 100, 80, 34  
Boys Score= 30, 29, 49, 48, 100, 48, 34, 45, 20, 30  

```python
import matplotlib.pyplot as plt 

girls_scores = [81,90,70,89,100,80,390,100,80,34] 
boys_scores = [30,29,49,48,100,48,34,45,20,30] 
grades_range = [10,20,30,40,50,60,70,80,90,100] 

fig = plt.figure() 
ax = fig.add_axes([0,0,1,1]) 
ax.scatter(grades_range, girls_scores, color='r') 
ax.scatter(grades_range, boys_scores, color='b') 
ax.set_xlabel('Grades Range') 
ax.set_ylabel('Grades Scored') 
ax.set_title('Scatter plot') 
plt.show() 
```

---

**Practical No. 3: 3D Graph Plotting**

**Name:**

**Roll No:**

**Q.1 Draw Helix x=sin(z), y=cos(z), -15 <z< 15**

```python
from numpy import *
from matplotlib.pyplot import *

ax = axes(projection='3d')
z = linspace(-15,15,200)
x = sin(z)
y = cos(z)
ax.plot3D(x,y,z,'



Sure, here are the questions and programs without outputs:

**Practical No. 4**
**2D- Transformation**

**Q1. Apply transformation on a point B(5,0)**

1) Scaling in x co-ordinate by factor 2.
```python
from sympy import*
p=Point(5,0)
m=Matrix([[2,0,0],[0,1,0], [0,0,1]])
P1=p.transform(m)
print(P1)
```

2) Scaling in y co-ordinate by factor 3.
```python
from sympy import*
p=Point(5,0)
m=Matrix([[1,0,0], [0,3,0], [0,0,1]])
P1=p.transform(m)
print(P1)
```

3) Scaling in x and y co-ordinate by factor 2 and 3.
```python
from sympy import*
p=Point(5,0)
m=Matrix([[2,0,0], [0,3,0], [0,0,1]])
P1=p.transform(m)
print(P1)
```

4) Uniform scaling by factor 3.
```python
from sympy import*
p=Point(5,0)
m=Matrix([[3,0,0],[0,3,0],[0,0,1]])
P1=p.transform(m)
print(P1)
```

5) Reflection through the line y=0.
```python
from sympy import*
p=Point(5,0)
m=Matrix([[1,0,0],[0,-1,0],[0,0,1]])
P1=p.transform(m)
print(P1)
```

6) Reflection through the line x=0.
```python
from sympy import*
p=Point(5,0)
m=Matrix([[-1,0,0],[0,1,0], [0,0,1]])
P1=p.transform(m)
print(P1)
```

7) Reflection through the line x-y=0.
```python
from sympy import*
p=Point(5,0)
m=Matrix([[0,1,0],[1,0,0],[0,0,1]])
P1=p.transform(m)
print(P1)
```

8) Reflection through the line x+y=0.
```python
from sympy import*
p=Point(5,0)
m=Matrix([[0,-1,0],[-1,0,0],[0,0,1]])
P1=p.transform(m)
print(P1)
```

9) Reflection through the line origin.
```python
from sympy import*
p=Point(5,0)
m=Matrix([[-1,0,0],[0,-1,0],[0,0,1]])
P1=p.transform(m)
print(P1)
```

10) Shearing in x co-ordinate by factor 3.
```python
from sympy import*
p=Point(5,0)
m=Matrix([[1,0,0],[3,1,0],[0,0,1]])
P1=p.transform(m)
print(P1)
```

11) Shearing in y co-ordinate by factor 2.
```python
from sympy import*
p=Point(5,0)
m=Matrix([[1,2,0],[0,1,0], [0,0,1]])
P1=p.transform(m)
print(P1)
```

12) Shearing in x and y co-ordinate by factor 3 and 2.
```python
from sympy import*
p=Point(5,0)
m=Matrix([[1,2,0],[3,1,0],[0,0,1]])
P1=p.transform(m)
print(P1)
```

13) Rotation about origin by angle 90.
```python
from sympy import*
p=Point(5,0)
m=Matrix([[0,1,0],[-1,0,0],[0,0,1]])
P1=p.transform(m)
print(P1)
```

14) Rotation about origin by angle -90.
```python
from sympy import*
p=Point(5,0)
m=Matrix([[0,1,0],[-1,0,0],[0,0,1]])
P1=p.transform(m)
print(P1)
```

15) Translation in x direction by factor 2.
```python
from sympy import*
p=Point(5,0)
m=Matrix([[1,0,0],[0,1,0],[2,0,1]])
P1=p.transform(m)
print(P1)
```

16) Translation in y direction by factor 3.
```python
from sympy import*
p=Point(5,0)
m=Matrix([[1,0,0],[0,1,0],[0,3,1]])
P1=p.transform(m)
print(P1)
```

17) Translation in x and y direction by factor 2 and 3.
```python
from sympy import*
p=Point(5,0)
m=Matrix([[1,0,0], [0,1,0],[2,3,1]])
P1=p.transform(m)
print(P1)
```

**Practical No. 5**
**3D Transformation**

**Q1. Apply transformation on a point B(5,0)**

1) Scaling in x co-ordinate by factor 2.
```python
from sympy import*
p=Point(5,0)
m=Matrix([[2,0,0],[0,1,0], [0,0,1]])
P1=p.transform(m)
print(P1)
```

2) Scaling in y co-ordinate by factor 3.
```python
from sympy import*
p=Point(5,0)
m=Matrix([[1,0,0], [0,3,0], [0,0,1]])
P1=p.transform(m)
print(P1)
```

3) Scaling in x and y co-ordinate by factor 2 and 3.
```python
from sympy import*
p=Point(5,0)
m=Matrix([[2,0,0], [0,3,0], [0,0,1]])
P1=p.transform(m)
print(P1)
```

4) Uniform scaling by factor 3.
```python
from sympy import*
p=Point(5,0)
m=Matrix([[3,0,0],[0,3,0],[0,0,1]])
P1=p.transform(m)
print(P1)
```

5) Reflection through the line y=0.
```python
from sympy import*
p=Point(5,0)
m=Matrix([[1,0,0],[0,-1,0],[0,0,1]])
P1=p.transform(m)
print(P1)
```

6) Reflection through the line x=0.
```python
from sympy import*
p=Point(5,0)
m=Matrix([[-1,0,0],[0,1,0], [0,0,1]])
P1=p.transform(m)
print(P1)
```

7) Reflection through the line x-y=0.
```python
from sympy

 import*
p=Point(5,0)
m=Matrix([[0,1,0],[1,0,0],[0,0,1]])
P1=p.transform(m)
print(P1)
```

8) Reflection through the line x+y=0.
```python
from sympy import*
p=Point(5,0)
m=Matrix([[0,-1,0],[-1,0,0],[0,0,1]])
P1=p.transform(m)
print(P1)
```

9) Reflection through the line origin.
```python
from sympy import*
p=Point(5,0)
m=Matrix([[-1,0,0],[0,-1,0],[0,0,1]])
P1=p.transform(m)
print(P1)
```

10) Shearing in x co-ordinate by factor 3.
```python
from sympy import*
p=Point(5,0)
m=Matrix([[1,0,0],[3,1,0],[0,0,1]])
P1=p.transform(m)
print(P1)
```

11) Shearing in y co-ordinate by factor 2.
```python
from sympy import*
p=Point(5,0)
m=Matrix([[1,2,0],[0,1,0], [0,0,1]])
P1=p.transform(m)
print(P1)
```

12) Shearing in x and y co-ordinate by factor 3 and 2.
```python
from sympy import*
p=Point(5,0)
m=Matrix([[1,2,0],[3,1,0],[0,0,1]])
P1=p.transform(m)
print(P1)
```

13) Rotation about origin by angle 90.
```python
from sympy import*
p=Point(5,0)
m=Matrix([[0,1,0],[-1,0,0],[0,0,1]])
P1=p.transform(m)
print(P1)
```

14) Rotation about origin by angle -90.
```python
from sympy import*
p=Point(5,0)
m=Matrix([[0,1,0],[-1,0,0],[0,0,1]])
P1=p.transform(m)
print(P1)
```

15) Translation in x direction by factor 2.
```python
from sympy import*
p=Point(5,0)
m=Matrix([[1,0,0],[0,1,0],[2,0,1]])
P1=p.transform(m)
print(P1)
```

16) Translation in y direction by factor 3.
```python
from sympy import*
p=Point(5,0)
m=Matrix([[1,0,0],[0,1,0],[0,3,1]])
P1=p.transform(m)
print(P1)
```

17) Translation in x and y direction by factor 2 and 3.
```python
from sympy import*
p=Point(5,0)
m=Matrix([[1,0,0], [0,1,0],[2,3,1]])
P1=p.transform(m)
print(P1)
```

These are the programs for the given transformations without the outputs. Let me know if you need further assistance!

Sure, here are the questions along with the corresponding programs:

**Practical No. 6**

Q1. Solve the LPP: Minimize Z = x1-3x2+2x3 Subject to, 3X1-X2+2Xx3<=7 3X1-1 xX2+2 x3<=7 -2X1+ 4x2<=12 -4x1+3X2+ 8x3<=10 X1>=0, x2>=0, x3>=0

```python
from pulp import*
Ipp=LpProblem('Problem',LpMinimize)
x1=LpVariable('x1',lowBound=0)
x2=LpVariable('x2',lowBound=0)
x3=LpVariable('x3',lowBound=0)
Ipp+=x1-3*x2+2*x3
Ipp+=3*x1-x2+2*x3<=7
Ipp+=-2*x1+4*x2<=12
Ipp+=-4*x1+3*x2+8*x3<=10
print(Ipp)
Ipp.solve()
print("\nx1=",value(x1),"\nx2=",value(x2),"\nx3=",value(x3),"Zmin=",value(Ipp.objective))
```

Q2. Solve the LPP: Minimize Z = 2x1-3x2 Subject to, -3x1+4x2<=12 X2<=2 X1>=0, x2>=0

```python
from pulp import*
Ipp=LpProblem('Problem',LpMinimize)
x1=LpVariable('x1',lowBound=0)
x2=LpVariable('x2',lowBound=0)
Ipp+=2*x1-3*x2
Ipp+=-3*x1+4*x2<=12
Ipp+=x2<=2
print(Ipp)
Ipp.solve()
print("\nx1=",value(x1),"\nx2=",value(x2),"Zmin=",value(Ipp.objective))
```

Q3. Solve the LPP: Minimize Z = -2x1-2x2 Subject to, -1x1+x2<=3 -1x1+3x2<=12 1x1-4x2<=4 x1>=0, x2>=0, x3>=0

```python
from pulp import*
Ipp=LpProblem('Problem',LpMinimize)
x1=LpVariable('x1',lowBound=0)
x2=LpVariable('x2',lowBound=0)
Ipp+=-2*x1-2*x2
Ipp+=-x1+x2<=3
Ipp+=-x1+3*x2<=12
Ippt+=x1-4*x2<=4
print(Ipp)
Ipp.solve()
print("\nx1=",value(x1),"\nx2=",value(x2),"Zmin=",value(Ipp.objective))
```

Q4. Solve the LPP: Minimize Z = -3x1-3x2-2x3 Subject to, X1+X2+2x3<=20 2X1+X24+4 x3<=32 -4x1+3xX2+ 8x3<=10 X1>=0, x2>=0, x3>=0

```python
from pulp import*
Ipp=LpProblem('Problem',LpMinimize)
x1=LpVariable('x1',lowBound=0)
x2=LpVariable('x2',lowBound=0)
x3=LpVariable('x3',lowBound=0)
Ipp+=-3*x1-3*x2-2*x3
Ipp+=x1+x2+2*x3<=20
Ipp+=2*x1+x2+4*x3<=32
Ipp+=-4*x1+3*x2+8*x3<=10
print(Ipp)
Ipp.solve()
print("\nx1=",value(x1),"\nx2=",value(x2),"\nx3=",value(x3),"Zmin=",value(Ipp.objective))
```

Q5. Solve the LPP: Minimize Z = -20x1-x2-2x3 Subject to, X1+4x2-x3<=20 X1+x2<=10 3xX1+5x2-3x3<=50 x1>=0, x2>=0, x3>=0

```python
from pulp import*
Ipp=LpProblem('Problem',LpMinimize)
x1=LpVariable('x1',lowBound=0)
x2=LpVariable('x2',lowBound=0)
x3=LpVariable('x3',lowBound=0)
Ipp+=-20*x1-x2-2*x3
Ipp+=x1+4*x2-x3<=20
Ipp+=x1+x2<=10
Ipp+=3*x1+5*x2-3*x3<=50
print(Ipp)
Ipp.solve()
print("\nx1=",value(x1),"\nx2=",value(x2),"\nx3=",value(x3),"Zmin=",value(Ipp.objective))
```

Q6. Solve the LPP: Maximize Z = 2x1+3x2+4x3 Subject to, 3x1-2X2<=41 2X1+ X2+3 x3<=35 2X1+3x2<=30 x1>=0, x2>=0, x3>=0

```python
from pulp import*
Ipp=LpProblem('Problem',LpMaximize)
x1=LpVariable('x1',lowBound=0)
x2=LpVariable('x2',lowBound=0)
x3=LpVariable('x3',lowBound=0)
Ipp+=2*x1+3*x2+4*x3
Ipp+=3*x1-2*x2<=41
Ipp+=2*x1+x2+3*x3

<=35
Ipp+=2*x1+3*x2<=30
print(Ipp)
Ipp.solve()
print("\nx1=",value(x1),"\nx2=",value(x2),"\nx3=",value(x3),"Zmax=",value(Ipp.objective))
```

**Note:** These are Python scripts using the PuLP library to solve the linear programming problems. You would need to install PuLP library to execute these scripts. Also, make sure to input these scripts in a Python environment.

Sure, here are the questions along with the corresponding Python code snippets:

**Question 13:**
Let \( A[2,1] \), \( B[4,-1] \), and \( [T] = \begin{bmatrix} 2 & 1 & 0 \\ \end{bmatrix} \). Find the equation of the transformed line \( A'B' \).

**Code:**
```python
from sympy import*
A = Point(1,1)
B = Point(-4,-1)
a = A.transform(Matrix([[1,-2,0],[-2,1,0],[0,0,1]]))
b = B.transform(Matrix([[1,-2,0],[-2,1,0],[0,0,1]]))
l = Segment(a,b)
print(l)
```

**Question 14:**
Let \( A[2,5] \), \( B[4,-13] \) be transformed to \( A' \) and \( B' \) under \( [T] = \begin{bmatrix} 4 & 1 & 0 \\ \end{bmatrix} \). Find the midpoint of segment \( A'B' \).

**Code:**
```python
from sympy import*
A = Point(2,5)
B = Point(4,-13)
a = A.transform(Matrix([[2,3,0],[4,1,0],[0,0,1]]))
b = B.transform(Matrix([[2,3,0],[4,1,0],[0,0,1]]))
l = Segment(a,b)
m = l.midpoint
print(m)
```

**Practical No. 8:**
Polygon and Triangle

**Question 1:**
Draw a polygon with vertices \( (0,0) \), \( (1,0) \), \( (2,2) \), \( (1,4) \) and find its area and perimeter.

**Code:**
```python
from sympy import*
A = Point(0,0)
B = Point(1,0)
C = Point(2,2)
D = Point(1,4)
p = Polygon(A,B,C,D)
print(p.area)
print(p.perimeter)
```

**Question 2:**
Draw a regular polygon with 4 sides and radius 6 centered at origin and find its area and perimeter.

**Code:**
```python
from sympy import*
A = Point(0,0)
P = Polygon(A,6,n=4)
print(P.area)
print(P.perimeter)
```

**Question 3:**
Draw a regular polygon with 8 sides and radius 2 centered at \( (-1,2) \) and find its area and perimeter.

**Code:**
```python
from sympy import*
a = Point(-1,2)
P = Polygon(a,2,n=8)
print(P.area)
print(P.perimeter)
```

**Question 4:**
Draw a regular polygon with 7 sides and radius 6 centered at \( (-2,2) \) and reflect it through the line \( x-2y=5 \).

**Code:**
```python
from sympy import*
A = Point(-2,2)
P = Polygon(A,6,n=7)
x,y = symbols('x,y')
b = Line(x-2*y-5)
c = P.reflect(b)
```

**Question 5:**
Draw a polygon with vertices \( (0,0) \), \( (-2,0) \), \( (5,5) \), \( (1,-6) \) and rotate by 180 degrees and find the internal angle at each vertex.

**Code:**
```python
from sympy import*
A = Point(0,0)
B = Point(-2,0)
C = Point(5,5)
D = Point(1,-6)
P = Polygon(A,B,C,D)
P.rotate(pi)
print(P.angles[A])
print(P.angles[B])
print(P.angles[C])
print(P.angles[D])
```

**Question 6:**
Reflect the triangle ABC through the line \( y = -3 \), where \( A[1,1] \), \( B[2,-3] \), \( C[-1,5] \).

**Code:**
```python
from sympy import*
A = Point(1,1)
B = Point(2,-3)
C = Point(-1,5)
T = Triangle(A,B,C)
a = Line(Point(0,-3),Point(1,-3))
b = T.reflect(a)
```

**Question 7:**
Rotate the triangle ABC by 90 degrees, where \( A[1,-2] \), \( B[4,-6] \), \( C[-1,4] \).

**Code:**
```python
from sympy import*
A = Point(1,-2)
B = Point(4,-6)
C = Point(-1,4)
T = Triangle(A,B,C)
T.rotate(pi/2)
```

**Question 8:**
Find the area and perimeter of the triangle ABC, where \( A[0,1] \), \( B[-5,0] \), \( C[3,-3] \).

**Code:**
```python
from sympy import*
A = Point(0,1)
B = Point(-5,0)
C = Point(3,-3)
T = Triangle(A,B,C)
print(T.area)
print(T.perimeter)
```

**Question 9:**
Find the angle at each vertex of the triangle ABC, where \( A[1,1] \), \( B[1,2] \), \( C[0,1] \).

**Code:**
```python
from sympy import*
A = Point(1,1)
B = Point(1,2)
C = Point(0,1)
T = Triangle(A,B,C)
print(T.angles[A])
print(T.angles[B])
print(T.angles[C])
```

**Question 10:**
Reflect the triangle ABC through the line \( y = x + 3 \), where \( A[-1,0] \), \( B[2,-1] \), \( C[1,3] \).

**Code:**
```python
from sympy import*
A = Point(-1,0)
B = Point(2,-1)
C = Point(1,3)
T = Triangle(A,B,C)
x,y = symbols('x,yâ)
a = Line(x-y+3)
b = T.reflect(a)
```

**Question 11:**
Rotate the triangle ABC by 270 degrees, where \( A[-1,2] \), \( B[2,-5] \), \( C[-1,7] \).

**Code:**
```python
from sympy import*
A = Point(-1,2)
B = Point(2,-5)
C = Point(-1,7)
T = Triangle(A,B,C)
T.rotate(3 * pi / 2)
```

**Question 12:**
Find the area and perimeter of the triangle ABC, where \( A[0,1] \), \( B[-5,0] \), \( C[-3,3] \).

**Code:**
```python


from sympy import*
A = Point(0,1)
B = Point(-5,0)
C = Point(-3,3)
T = Triangle(A,B,C)
print(T.area)
print(T.perimeter)
```

**Question 13:**
Find the angle at each vertex of the triangle PQR, where \( P[1,0] \), \( Q[2,3] \), \( R[0,-2] \).

**Code:**
```python
from sympy import*
P = Point(1,0)
Q = Point(2,3)
R = Point(0,-2)
T = Triangle(P,Q,R)
print(T.angles[P])
print(T.angles[Q])
print(T.angles[R])
```